// Code generated by templ - DO NOT EDIT.

// templ: version: 0.2.476
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/brunofjesus/pricetracker/catalog/pkg/price"

type ChartProps struct {
	MinimumPrice float64
	MaximumPrice float64
	AveragePrice float64
	Prices       []price.Price
}

type timeValue struct {
	Time  int64   `json:"time"`
	Value float64 `json:"value"`
}

func HistoryChartComponent(p ChartProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"chart\" class=\"col-lg-12\" style=\"min-height: 500px\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graph(pricesToTimeValues(p.Prices), p.MinimumPrice, p.AveragePrice, p.MaximumPrice).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script src=\"/js/lightweight-charts.standalone.production.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func graph(data []timeValue, minimum float64, average float64, maximum float64) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_graph_7422`,
		Function: `function __templ_graph_7422(data, minimum, average, maximum){window.addEventListener("load", () => {
        const chartElement = document.getElementById("chart");
        const chart = LightweightCharts.createChart(chartElement, {
            width: chartElement.offsetWidth,
            height: chartElement.offsetHeight,
            layout: {
                textColor: '#000',
                backgroundColor: '#fff',
            },
            timeScale: {
                timeVisible: true
            },
            crosshair: {
                vertLine: {
                    width: 4,
                    color: 'rgba(0, 0, 0, 0.1)',
                    style: 0,
                },
                horzLine: {
                    visible: false,
                    labelVisible: false,
                },
            },

            handleScroll: {
                vertTouchDrag: false,
            },
        });

        window.onresize = function() {
            chart.applyOptions({
                width: chartElement.offsetWidth,
                height: chartElement.offsetHeight
            });
        }

        const series = chart.addLineSeries({
            color: 'rgb(0, 120, 255)',
            lineWidth: 2,
            crosshairMarkerVisible: true,
            lastValueVisible: true,
            priceLineVisible: true,
        });

        series.setData(data);

        const lineWidth = 2;
        const minPriceLine = {
            price: minimum,
            color: 'rgba(100, 100, 100, 0.4)',
            lineWidth: lineWidth,
            lineStyle: LightweightCharts.LineStyle.Solid,
            axisLabelVisible: true,
            title: 'minimum price',
        };
        const avgPriceLine = {
            price: average,
            color: 'rgba(100, 100, 100, 0.4)',
            lineWidth: lineWidth,
            lineStyle: LightweightCharts.LineStyle.Solid,
            axisLabelVisible: true,
            title: 'average price',
        };
        const maxPriceLine = {
            price: maximum,
            color: 'rgba(100, 100, 100, 0.4)',
            lineWidth: lineWidth,
            lineStyle: LightweightCharts.LineStyle.Solid,
            axisLabelVisible: true,
            title: 'maximum price',
        };

        series.createPriceLine(minPriceLine);
        series.createPriceLine(avgPriceLine);
        series.createPriceLine(maxPriceLine);

        chart.timeScale().fitContent()
    });}`,
		Call:       templ.SafeScript(`__templ_graph_7422`, data, minimum, average, maximum),
		CallInline: templ.SafeScriptInline(`__templ_graph_7422`, data, minimum, average, maximum),
	}
}

func pricesToTimeValues(prices []price.Price) []timeValue {
	result := []timeValue{}
	for _, p := range prices {
		result = append(result, timeValue{
			Time:  p.DateTime.Unix(),
			Value: float64(p.Value) / 100,
		})
	}

	return result
}
