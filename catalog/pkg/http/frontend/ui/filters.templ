package ui

import product "github.com/brunofjesus/pricetracker/catalog/pkg/product"
import db_store "github.com/brunofjesus/pricetracker/catalog/internal/repository/store"
import "github.com/brunofjesus/pricetracker/catalog/pkg/pagination"
import "github.com/brunofjesus/pricetracker/catalog/pkg/http/common/filters"

templ FiltersComponent(page pagination.PaginatedQuery, requestFilters product.FinderFilters, stores []db_store.Store) {
    <div class="d-flex flex-wrap gap-2">
    if requestFilters.StoreId != nil {
        @FilterBadgeComponent("Store", findStoreName(*requestFilters.StoreId, stores), generateUrl(page, requestFilters, "StoreId"))
    }

    if requestFilters.MinPrice != nil {
        @FilterBadgeComponent("Min. Price", float64ToString(*requestFilters.MinPrice / 100), generateUrl(page, requestFilters, "MinPrice"))
    }

    if requestFilters.MaxPrice != nil {
        @FilterBadgeComponent("Max. Price", float64ToString(*requestFilters.MaxPrice / 100), generateUrl(page, requestFilters, "MaxPrice"))
    }

    if len(requestFilters.NameLike) > 0 {
        @FilterBadgeComponent("Name", requestFilters.NameLike, generateUrl(page, requestFilters, "NameLike"))
    }

    if len(requestFilters.BrandLike) > 0 {
        @FilterBadgeComponent("Brand", requestFilters.BrandLike, generateUrl(page, requestFilters, "BrandLike"))
    }

	if requestFilters.Available != nil {
        @FilterBadgeComponent("Available", boolToString(*requestFilters.Available), generateUrl(page, requestFilters, "Available"))
	}

	if len(requestFilters.ProductUrl) > 0 {
        @FilterBadgeComponent("Product URL", "Yes", generateUrl(page, requestFilters, "ProductUrl"))
	}

	if requestFilters.MinDifference != nil {
        @FilterBadgeComponent("Min. Difference", float64ToString(*requestFilters.MinDifference / 100), generateUrl(page, requestFilters, "MinDifference"))
	}

	if requestFilters.MaxDifference != nil {
        @FilterBadgeComponent("Max. Difference", float64ToString(*requestFilters.MaxDifference / 100), generateUrl(page, requestFilters, "MaxDifference"))
	}

	if requestFilters.MinDiscountPercent != nil {
        @FilterBadgeComponent("Min. Discount (%)", float64ToString(*requestFilters.MinDiscountPercent * 100), generateUrl(page, requestFilters, "MinDiscountPercent"))
	}

	if requestFilters.MaxDiscountPercent != nil {
        @FilterBadgeComponent("Max. Discount (%)", float64ToString(*requestFilters.MaxDiscountPercent * 100), generateUrl(page, requestFilters, "MaxDiscountPercent"))
	}

	if requestFilters.MinAveragePrice != nil {
        @FilterBadgeComponent("Min. Average Price", float64ToString(*requestFilters.MinAveragePrice / 100), generateUrl(page, requestFilters, "MinAveragePrice"))
	}

	if requestFilters.MaxAveragePrice != nil {
        @FilterBadgeComponent("Max. Average Price", float64ToString(*requestFilters.MaxAveragePrice / 100), generateUrl(page, requestFilters, "MaxAveragePrice"))
	}

	if requestFilters.MinMinimumPrice != nil {
        @FilterBadgeComponent("Min. Lower Price", float64ToString(*requestFilters.MinMinimumPrice / 100), generateUrl(page, requestFilters, "MinMinimumPrice"))
	}

	if requestFilters.MaxMinimumPrice != nil {
        @FilterBadgeComponent("Max. Lower Price", float64ToString(*requestFilters.MaxMinimumPrice / 100), generateUrl(page, requestFilters, "MaxMinimumPrice"))
	}

	if requestFilters.MinMaximumPrice != nil {
        @FilterBadgeComponent("Min. Highest Price", float64ToString(*requestFilters.MinMaximumPrice / 100), generateUrl(page, requestFilters, "MinMaximumPrice"))
	}

	if requestFilters.MaxMaximumPrice != nil {
        @FilterBadgeComponent("Max. Highest Price", float64ToString(*requestFilters.MaxMaximumPrice / 100), generateUrl(page, requestFilters, "MaxMaximumPrice"))
	}

	@FilterDialogComponent(requestFilters, stores)
    </div>
}

func generateUrl(page pagination.PaginatedQuery, requestFilters product.FinderFilters, toRemove string) string {
    switch (toRemove) {
        case "StoreId":
            requestFilters.StoreId = nil
        case "MinPrice":
            requestFilters.MinPrice = nil
        case "MaxPrice":
            requestFilters.MaxPrice = nil
        case "NameLike":
            requestFilters.NameLike = ""
        case "BrandLike":
            requestFilters.BrandLike = ""
        case "Available":
            requestFilters.Available = nil
        case "ProductUrl":
            requestFilters.ProductUrl = ""
        case "MinDifference":
            requestFilters.MinDifference = nil
        case "MaxDifference":
            requestFilters.MaxDifference = nil
        case "MinDiscountPercent":
            requestFilters.MinDiscountPercent = nil
        case "MaxDiscountPercent":
            requestFilters.MaxDiscountPercent = nil
        case "MinAveragePrice":
            requestFilters.MinAveragePrice = nil
        case "MaxAveragePrice":
            requestFilters.MaxAveragePrice = nil
        case "MinMinimumPrice":
            requestFilters.MinMinimumPrice = nil
        case "MaxMinimumPrice":
            requestFilters.MaxMinimumPrice = nil
        case "MinMaximumPrice":
            requestFilters.MinMaximumPrice = nil
        case "MaxMaximumPrice":
            requestFilters.MaxMaximumPrice = nil
    }
    return filters.ToQueryParameters(page, requestFilters)
}

func findStoreName(id int, stores []db_store.Store) string {
   for _, store := range stores {
     if store.StoreId == int64(id) {
        return store.Name
     }
   }

   return ""
}

func boolToString(v bool) string {
    if v == true {
        return "True"
    }
    return "False"
}