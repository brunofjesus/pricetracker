package ui

import "github.com/brunofjesus/pricetracker/catalog/pkg/price"

type ChartProps struct {
    MinimumPrice float64
    MaximumPrice float64
    AveragePrice float64
    Prices       []price.Price
}

type timeValue struct {
	Time  int64  `json:"time"`
	Value float64 `json:"value"`
}

templ HistoryChartComponent(p ChartProps) {
    <div id="chart" class="col-lg-12" style="min-height: 500px">
    </div>
    @graph(pricesToTimeValues(p.Prices), p.MinimumPrice, p.AveragePrice, p.MaximumPrice)
    <script src="/js/lightweight-charts.standalone.production.js"/>
}

script graph(data []timeValue, minimum float64, average float64, maximum float64) {
    window.addEventListener("load", () => {
        const chartElement = document.getElementById("chart");
        const chart = LightweightCharts.createChart(chartElement, {
            width: chartElement.offsetWidth,
            height: chartElement.offsetHeight,
            layout: {
                textColor: '#000',
                backgroundColor: '#fff',
            },
            timeScale: {
                timeVisible: true
            },
            crosshair: {
                vertLine: {
                    width: 4,
                    color: 'rgba(0, 0, 0, 0.1)',
                    style: 0,
                },
                horzLine: {
                    visible: false,
                    labelVisible: false,
                },
            },

            handleScroll: {
                vertTouchDrag: false,
            },
        });

        window.onresize = function() {
            chart.applyOptions({
                width: chartElement.offsetWidth,
                height: chartElement.offsetHeight
            });
        }

        const series = chart.addLineSeries({
            color: 'rgb(0, 120, 255)',
            lineWidth: 2,
            crosshairMarkerVisible: true,
            lastValueVisible: true,
            priceLineVisible: true,
        });

        series.setData(data);

        const lineWidth = 2;
        const minPriceLine = {
            price: minimum,
            color: 'rgba(100, 100, 100, 0.4)',
            lineWidth: lineWidth,
            lineStyle: LightweightCharts.LineStyle.Solid,
            axisLabelVisible: true,
            title: 'minimum price',
        };
        const avgPriceLine = {
            price: average,
            color: 'rgba(100, 100, 100, 0.4)',
            lineWidth: lineWidth,
            lineStyle: LightweightCharts.LineStyle.Solid,
            axisLabelVisible: true,
            title: 'average price',
        };
        const maxPriceLine = {
            price: maximum,
            color: 'rgba(100, 100, 100, 0.4)',
            lineWidth: lineWidth,
            lineStyle: LightweightCharts.LineStyle.Solid,
            axisLabelVisible: true,
            title: 'maximum price',
        };

        series.createPriceLine(minPriceLine);
        series.createPriceLine(avgPriceLine);
        series.createPriceLine(maxPriceLine);

        chart.timeScale().fitContent()
    });
}

func pricesToTimeValues(prices []price.Price) []timeValue {
    result := []timeValue{}
    for _, p := range prices {
        result = append(result, timeValue{
            Time: p.DateTime.Unix(),
            Value: float64(p.Value) / 100,
        })
    }

    return result
}