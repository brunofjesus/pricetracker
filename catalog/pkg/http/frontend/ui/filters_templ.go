// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.513
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import product "github.com/brunofjesus/pricetracker/catalog/pkg/product"
import db_store "github.com/brunofjesus/pricetracker/catalog/internal/repository/store"
import "github.com/brunofjesus/pricetracker/catalog/pkg/pagination"
import "github.com/brunofjesus/pricetracker/catalog/pkg/http/common/filters"

func FiltersComponent(page pagination.PaginatedQuery, requestFilters product.FinderFilters, stores []db_store.Store) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"d-flex flex-wrap gap-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if requestFilters.StoreId != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Store", findStoreName(*requestFilters.StoreId, stores), generateUrl(page, requestFilters, "StoreId")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MinPrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Min. Price", float64ToString(*requestFilters.MinPrice/100), generateUrl(page, requestFilters, "MinPrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MaxPrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Max. Price", float64ToString(*requestFilters.MaxPrice/100), generateUrl(page, requestFilters, "MaxPrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if len(requestFilters.NameLike) > 0 {
			templ_7745c5c3_Err = FilterBadgeComponent("Name", requestFilters.NameLike, generateUrl(page, requestFilters, "NameLike")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if len(requestFilters.BrandLike) > 0 {
			templ_7745c5c3_Err = FilterBadgeComponent("Brand", requestFilters.BrandLike, generateUrl(page, requestFilters, "BrandLike")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.Available != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Available", boolToString(*requestFilters.Available), generateUrl(page, requestFilters, "Available")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if len(requestFilters.ProductUrl) > 0 {
			templ_7745c5c3_Err = FilterBadgeComponent("Product URL", "Yes", generateUrl(page, requestFilters, "ProductUrl")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MinDifference != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Min. Difference", float64ToString(*requestFilters.MinDifference/100), generateUrl(page, requestFilters, "MinDifference")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MaxDifference != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Max. Difference", float64ToString(*requestFilters.MaxDifference/100), generateUrl(page, requestFilters, "MaxDifference")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MinDiscountPercent != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Min. Discount (%)", float64ToString(*requestFilters.MinDiscountPercent*100), generateUrl(page, requestFilters, "MinDiscountPercent")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MaxDiscountPercent != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Max. Discount (%)", float64ToString(*requestFilters.MaxDiscountPercent*100), generateUrl(page, requestFilters, "MaxDiscountPercent")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MinAveragePrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Min. Average Price", float64ToString(*requestFilters.MinAveragePrice/100), generateUrl(page, requestFilters, "MinAveragePrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MaxAveragePrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Max. Average Price", float64ToString(*requestFilters.MaxAveragePrice/100), generateUrl(page, requestFilters, "MaxAveragePrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MinMinimumPrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Min. Lower Price", float64ToString(*requestFilters.MinMinimumPrice/100), generateUrl(page, requestFilters, "MinMinimumPrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MaxMinimumPrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Max. Lower Price", float64ToString(*requestFilters.MaxMinimumPrice/100), generateUrl(page, requestFilters, "MaxMinimumPrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MinMaximumPrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Min. Highest Price", float64ToString(*requestFilters.MinMaximumPrice/100), generateUrl(page, requestFilters, "MinMaximumPrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if requestFilters.MaxMaximumPrice != nil {
			templ_7745c5c3_Err = FilterBadgeComponent("Max. Highest Price", float64ToString(*requestFilters.MaxMaximumPrice/100), generateUrl(page, requestFilters, "MaxMaximumPrice")).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = FilterDialogComponent(requestFilters, stores).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func generateUrl(page pagination.PaginatedQuery, requestFilters product.FinderFilters, toRemove string) string {
	switch toRemove {
	case "StoreId":
		requestFilters.StoreId = nil
	case "MinPrice":
		requestFilters.MinPrice = nil
	case "MaxPrice":
		requestFilters.MaxPrice = nil
	case "NameLike":
		requestFilters.NameLike = ""
	case "BrandLike":
		requestFilters.BrandLike = ""
	case "Available":
		requestFilters.Available = nil
	case "ProductUrl":
		requestFilters.ProductUrl = ""
	case "MinDifference":
		requestFilters.MinDifference = nil
	case "MaxDifference":
		requestFilters.MaxDifference = nil
	case "MinDiscountPercent":
		requestFilters.MinDiscountPercent = nil
	case "MaxDiscountPercent":
		requestFilters.MaxDiscountPercent = nil
	case "MinAveragePrice":
		requestFilters.MinAveragePrice = nil
	case "MaxAveragePrice":
		requestFilters.MaxAveragePrice = nil
	case "MinMinimumPrice":
		requestFilters.MinMinimumPrice = nil
	case "MaxMinimumPrice":
		requestFilters.MaxMinimumPrice = nil
	case "MinMaximumPrice":
		requestFilters.MinMaximumPrice = nil
	case "MaxMaximumPrice":
		requestFilters.MaxMaximumPrice = nil
	}
	return filters.ToQueryParameters(page, requestFilters)
}

func findStoreName(id int, stores []db_store.Store) string {
	for _, store := range stores {
		if store.StoreId == int64(id) {
			return store.Name
		}
	}

	return ""
}

func boolToString(v bool) string {
	if v == true {
		return "True"
	}
	return "False"
}
