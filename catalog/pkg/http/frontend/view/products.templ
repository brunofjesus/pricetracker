package view

import "github.com/brunofjesus/pricetracker/catalog/pkg/http/frontend/ui"
import db_product "github.com/brunofjesus/pricetracker/catalog/internal/repository/product"
import "github.com/brunofjesus/pricetracker/catalog/pkg/pagination"
import product "github.com/brunofjesus/pricetracker/catalog/pkg/product"
import "strconv"
import "fmt"

type ProductsViewProps struct {
	Page    pagination.PaginatedData[[]db_product.ProductWithMetrics]
	Filters product.FinderFilters
}

// https://mdbootstrap.com/snippets/standard/mdbootstrap/4852169?view=project#html-tab-view

templ ProductsView(p ProductsViewProps) {
	@Base() {
        <!-- New stuff -->
        <section class="">
        <div class="container">
            <div class="row">
              <!-- sidebar -->
              <div class="col-lg-3">
                @ui.Sidebar()
              </div>
              <!-- content -->
              <div class="col-lg-9">
                @ui.ProductGridComponent(p.Page)

                 <!-- Pagination -->
                @ui.PaginatorComponent(ui.PaginatorProps{
                    CurrentPage: p.Page.CurrentPage,
                    TotalPages: p.Page.TotalPages,
                    UrlExpression: "/?page=%d",
                })
              </div>
            </div>
        </div>
        </section>

        <!-- Old stuff -->
		<div>
			Page: { strconv.Itoa(p.Page.CurrentPage) } of { strconv.Itoa(p.Page.TotalPages) }
		</div>
		<div>
			Results: { strconv.Itoa(p.Page.ItemCount) } of { strconv.FormatInt(p.Page.TotalResults, 10) }
		</div>
		<div>
			Filters:
      if (p.Filters.StoreId > 0) {
        @property("StoreId", strconv.Itoa(p.Filters.StoreId))
      }
      { fmt.Sprintf("%+v", p.Filters) } 
		</div>
		<div>
			Sort: { p.Page.SortField } / { p.Page.SortDirection }
		</div>
		<br/>
		<br/>
		<div class="products">

		</div>
	}
}


templ property(label string, value string) {
    <li>
        <label><b>{label}</b></label>: {value}
    </li>
}
